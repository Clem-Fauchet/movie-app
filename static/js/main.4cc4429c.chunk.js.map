{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/PopUp.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","alt","Title","Results","results","map","key","PopUp","selected","closePopup","Year","imdbRating","Plot","App","useState","searchQuery","state","setState","apiUrl","e","inputQuery","target","value","prevState","fetch","then","res","json","data","id","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAoBeA,MAhBf,YAA0C,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OAC7B,OACE,6BACE,6BAASC,UAAU,sBACjB,2BACEC,KAAK,OACLC,YAAY,wBACZF,UAAU,aACVG,SAAUL,EACVM,WAAYL,OCFPM,MATf,YAAwC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UACxB,OACE,yBAAKP,UAAU,SAASQ,QAAS,kBAAMD,EAAUD,EAAOG,UACtD,yBAAKC,IAAKJ,EAAOK,OAAQC,IAAI,WAC7B,4BAAKN,EAAOO,SCQHC,MAVf,YAA0C,IAAvBC,EAAsB,EAAtBA,QAASR,EAAa,EAAbA,UAC1B,OACE,6BAASP,UAAU,WAChBe,EAAQC,KAAI,SAACV,GAAD,OACX,kBAAC,EAAD,CAAQW,IAAKX,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,SCgBhDW,MAtBf,YAA0C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACzB,OACE,6BACE,6BAASpB,UAAU,UACjB,yBAAKA,UAAU,WACb,4BACGmB,EAASN,MADZ,IACmB,kCAAQM,EAASE,KAAjB,MAEnB,uBAAGrB,UAAU,UAAb,WAA+BmB,EAASG,YACxC,yBAAKtB,UAAU,QACb,yBAAKU,IAAKS,EAASR,OAAQC,IAAI,WAC/B,2BAAIO,EAASI,OAEf,4BAAQvB,UAAU,QAAQQ,QAASY,GAAnC,aCyDKI,MAjEf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,YAAa,GACbX,QAAS,GACTI,SAAU,KAJC,mBACNQ,EADM,KACCC,EADD,KAOPC,EAAS,sCAuCf,OACE,yBAAK7B,UAAU,OACb,gCACE,+CAEF,8BACE,kBAAC,EAAD,CAAQF,YA/BM,SAACgC,GACnB,IAAIC,EAAaD,EAAEE,OAAOC,MAC1BL,GAAS,SAACM,GACR,OAAO,eAAKA,EAAZ,CAAuBR,YAAaK,QA4BAhC,OA3CzB,SAAC+B,GACA,UAAVA,EAAEb,KACJkB,MAAM,GAAD,OAAIN,EAAJ,cAAgBF,EAAMD,cACxBU,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLX,GAAS,SAACM,GACR,OAAO,eAAKA,EAAZ,CAAuBnB,QAASwB,EAAK1C,kBAsCzC,kBAAC,EAAD,CAASkB,QAASY,EAAMZ,QAASR,UAzBrB,SAACiC,GACjBL,MAAM,GAAD,OAAIN,EAAJ,cAAgBW,IAClBJ,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAIjC,EAASiC,EACbX,GAAS,SAACM,GACR,OAAO,eAAKA,EAAZ,CAAuBf,SAAUb,UAGpCmC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,SAkBM,oBAAxBf,EAAMR,SAASN,OACrB,kBAAC,EAAD,CAAOM,SAAUQ,EAAMR,SAAUC,WAhBtB,WACjBQ,GAAS,SAACM,GACR,OAAO,eAAKA,EAAZ,CAAuBf,SAAU,cCrCnB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.4cc4429c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './search.scss'\r\n\r\nfunction Search({ handleInput, search }) {\r\n  return (\r\n    <div>\r\n      <section className='search-box-wrapper'>\r\n        <input\r\n          type='text'\r\n          placeholder='Search for a movie...'\r\n          className='search-box'\r\n          onChange={handleInput}\r\n          onKeyPress={search}\r\n        />\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\n\r\nfunction Result({ result, openPopup }) {\r\n  return (\r\n    <div className='result' onClick={() => openPopup(result.imdbID)}>\r\n      <img src={result.Poster} alt='poster' />\r\n      <h3>{result.Title}</h3>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Result\r\n","import React from 'react'\r\n\r\nimport Result from './Result'\r\n\r\nfunction Results({ results, openPopup }) {\r\n  return (\r\n    <section className='results'>\r\n      {results.map((result) => (\r\n        <Result key={result.imdbID} result={result} openPopup={openPopup} />\r\n      ))}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Results\r\n","import React from 'react'\r\n\r\nfunction PopUp({ selected, closePopup }) {\r\n  return (\r\n    <div>\r\n      <section className='pop-up'>\r\n        <div className='content'>\r\n          <h2>\r\n            {selected.Title} <span>({selected.Year})</span>\r\n          </h2>\r\n          <p className='rating'>Rating: {selected.imdbRating}</p>\r\n          <div className='plot'>\r\n            <img src={selected.Poster} alt='poster' />\r\n            <p>{selected.Plot}</p>\r\n          </div>\r\n          <button className='close' onClick={closePopup}>\r\n            Close\r\n          </button>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PopUp\r\n","import React, { useState } from 'react'\n\nimport './App.scss'\nimport Search from './components/Search'\nimport Results from './components/Results'\nimport PopUp from './components/PopUp'\n\nfunction App() {\n  const [state, setState] = useState({\n    searchQuery: '',\n    results: [],\n    selected: {},\n  })\n\n  const apiUrl = 'http://omdbapi.com/?apikey=b5e98375'\n\n  const search = (e) => {\n    if (e.key === 'Enter') {\n      fetch(`${apiUrl}&s=${state.searchQuery}`)\n        .then((res) => res.json())\n        .then((data) => {\n          setState((prevState) => {\n            return { ...prevState, results: data.Search }\n          })\n        })\n    }\n  }\n\n  const handleInput = (e) => {\n    let inputQuery = e.target.value\n    setState((prevState) => {\n      return { ...prevState, searchQuery: inputQuery }\n    })\n  }\n\n  const openPopup = (id) => {\n    fetch(`${apiUrl}&i=${id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        let result = data\n        setState((prevState) => {\n          return { ...prevState, selected: result }\n        })\n      })\n      .catch((err) => console.log(err))\n  }\n\n  const closePopup = () => {\n    setState((prevState) => {\n      return { ...prevState, selected: {} }\n    })\n  }\n\n  return (\n    <div className='App'>\n      <header>\n        <h1>Movie Database</h1>\n      </header>\n      <main>\n        <Search handleInput={handleInput} search={search} />\n        <Results results={state.results} openPopup={openPopup} />\n\n        {typeof state.selected.Title != 'undefined' ? (\n          <PopUp selected={state.selected} closePopup={closePopup} />\n        ) : (\n          false\n        )}\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}